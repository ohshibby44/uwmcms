<?php

/**
 * @file
 * Custom PHP code for the UWMed theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\node\Entity\Node;
use Drupal\uwmcs_reader\Controller\UwmMapper;

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 */
function uwmed_theme_suggestions_page_alter(&$suggestions, $variables) {

  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    if (is_object($node)) {
      array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());

    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 */
function uwmed_theme_suggestions_node_alter(array &$suggestions, array $variables) {
}

/**
 * Implements theme_preprocess_region().
 */
function uwmed_preprocess_region(&$variables) {

}

/**
 * Implements hook_page_attachments_alter().
 */
function uwmed_page_attachments_alter(&$variables) {

  /***
   * Add meta-description from Information Manager (IM):
   */
  if (function_exists('metatag_get_route_entity')) {

    $entity = metatag_get_route_entity();
    $metaTags = metatag_get_tags_from_route();
    $drupalDescriptionTag = array_filter($metaTags['#attached']['html_head'], function ($v) {
      return $v[1] === 'description';
    });

    if (!empty($entity->uwmcs_reader_api_values->seoMetaDescription)) {

      $imDescriptionTag = [
        [
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'description',
            'content' => $entity->uwmcs_reader_api_values->seoMetaDescription,
          ],
        ],
        'description',
      ];
    }

    if (!empty($imDescriptionTag)) {

      $variables['#attached']['html_head'][] = $imDescriptionTag;

    }

  }

}

/**
 * Implements theme_preprocess_html().
 */
function uwmed_preprocess_html(&$variables) {
}

/**
 * Implements theme_preprocess_page().
 */
function uwmed_preprocess_page(&$variables) {
}

/**
 * Implements theme_preprocess_node().
 */
function uwmed_preprocess_node(&$variables) {

  $node = $variables['node'];

  if ($node->getType() === 'uwm_clinic') {

    // Copy Urgent/ Primary care node images:
    if (empty($node->field_clinic_image->value)) {

      if (stripos($node->title->value, 'Urgent') !== FALSE) {

        $path = UwmMapper::getPathByNid($node->nid->value);
        $primaryCareNid = UwmMapper::getNidByPathAlias(
          str_replace('urgent', 'primary', $path));

        if ($primaryCareNid) {

          $pNode = Node::load($primaryCareNid);
          $variables['content']['field_clinic_image'] = $pNode->field_clinic_image->view();

        }

      }

    }

  }

  if ($node->getType() === 'uwm_medical_service' || 'uwm_medical_specialty') {
    $has_quiz = !is_null($node->field_quiz);
    if ($has_quiz) {
      if (isset($node->field_quiz->getValue()[0])) {
        $quiz_id = $node->field_quiz->getValue()[0]['target_id'];
        if (isset($quiz_id)) {
          $quiz_entity = Drupal::entityTypeManager()
            ->getStorage("node")
            ->load($quiz_id);
        }

        if (isset($quiz_entity)) {
          $quiz_title = $quiz_entity->title->value;
          $quiz_intro = strip_tags($quiz_entity->body->value);
          $quiz_exit = strip_tags($quiz_entity->field_body_body_second->value);
          $quiz_questions = $quiz_entity->field_quiz_questions;

          $formatted_info = [
            'name' => $quiz_title,
            'main' => $quiz_intro,
            'results' => $quiz_exit,
          ];

          $formatted_quiz = [
            'info' => $formatted_info,
            'questions' => [],
          ];

          foreach ($quiz_questions as $q) {
            $q_id = $q->getValue()['target_id'];

            if ($q_id) {
              $q_entity = Drupal::entityTypeManager()
                ->getStorage("paragraph")
                ->load($q_id);
              $question_text = strip_tags($q_entity->field_text_snippet->value);
              $correct_answer = $q_entity->field_integer->value;
              $correct_prompt = strip_tags($q_entity->field_correct_answer_prompt->value);
              $incorrect_prompt = strip_tags($q_entity->field_incorrect_answer_prompt->value);
              $answer_list = $q_entity->field_answer_list;

              $formatted_answers = [];
              foreach ($answer_list as $key => $answer) {
                $is_correct = ($key + 1 === (int) $correct_answer);
                $formatted_answers[] = [
                  'option' => strip_tags($answer->value),
                  'correct' => $is_correct,
                ];
              }

              $formatted_question = [
                'q' => $question_text,
                'a' => $formatted_answers,
                'correct' => $correct_prompt,
                'incorrect' => $incorrect_prompt,
              ];
              $formatted_quiz['questions'][] = $formatted_question;
            }
          }

          $variables["#attached"]['drupalSettings']['formattedQuizJSON'] = $formatted_quiz;
          $quiz_image_field = $quiz_entity->field_image->getValue();

          if (!empty($quiz_image_field[0]['target_id'])) {
            $quiz_image_id = $quiz_image_field[0]['target_id'];
            $quiz_image_entity = Drupal::entityTypeManager()
              ->getStorage("file")
              ->load($quiz_image_id);
          }

          if (!empty($quiz_image_entity)) {
            $quiz_image_url = $quiz_image_entity->uri->value;
            $variables['content']['quiz_image_url'] = $quiz_image_url;
          }
        }
      }
    }
  }

  if ($node->getType() === 'fact_page') {

    $body = $node->body->getValue();

    if (!empty($body[0]['summary'])) {
      $variables['body_summary'] = $body[0]['summary'];
      $variables['body_summary2'] = $node->body->view('summary');
      $variables['body_sans_summary'] = str_replace($body[0]['summary'], '',
        $body[0]['value']);
    }

  }
}

/**
 * Implements theme_preprocess_field().
 */
function uwmed_preprocess_field(&$variables) {

  $element = $variables['element'] ?? NULL;
  $obj = $element['#object'] ?? NULL;
  $field_name = $element['#field_name'] ?? NULL;

  /***
   * Add video URL's for theming:
   */
  if ($obj && $obj->hasField('field_media_video_data_url')) {

    $variables['videoUrl'] = $obj->get('field_media_video_data_url')
      ->getValue();
    $variables['captionUrl'] = $obj->get('field_media_video_caption_url')
      ->getValue();

  }

  /***
   * Add unique Id for lightbox links:
   */
  if ($obj && $obj->hasField('uuid')) {

    $id = $obj->get('uuid')->getValue();
    $id = $id[0]['value'] ?? rand();
    $variables['uwm_field_uuid'] = Html::getUniqueId('uw-' . $id);

  }

  /***
   * Set normal heading element for header fields:
   */
  $headerFields = [
    'field_bottom_content_blocks_head',
    'field_content_blocks_heading',
    'field_top_content_blocks_heading',

  ];
  if (in_array($field_name, $headerFields)) {

    $variables['item_element'] = 'h2';
    $variables['attributes']['class'][] = 'header-field';
  }

  /***
   * Add term names safe for templates:
   */
  $stylingFields = [
    'field_content_blocks_style',
    'field_body_style_terms',
  ];
  if ($obj && in_array($field_name, $stylingFields)) {

    $variables['wrapper_classes'] = $element['#uwm_678891'];

  }

  /***
   * Add generic, common class to footer field:
   */
  $footerFields = [
    'field_content_blocks_footer',
    'field_top_content_blocks_footer',
  ];
  if ($obj && in_array($field_name, $footerFields)) {

    $variables['attributes']['class'][] = 'blocks-section-footer';

  }

}

/**
 * Implements template_preprocess_taxonomy_term().
 */
function uwmed_preprocess_taxonomy_term(&$variables) {
}

/**
 * Implements template_preprocess_views_view().
 */
function uwmed_preprocess_views_view(&$variables) {
}

/**
 * Implements theme_preprocess_page().
 */
function uwmed_page_bottom(array &$page_bottom) {

}

/**
 * Implements hook_preprocess_HOOK() for system branding block templates.
 */
function uwmed_preprocess_block__system_branding_block(&$variables) {

  $variables['site_logo'] = "/{$variables['theme']['path']}/dist/assets/uw-medicine.png";

}

/**
 * Implements hook_preprocess_HOOK() for taxonomy term page templates.
 */
function uwmed_preprocess_page__taxonomy__term(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for article author field templates.
 */
function uwmed_preprocess_field__node__field_author__article(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for hierarchical term formatter templates.
 */
function uwmed_preprocess_hierarchical_term_formatter(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for button input templates.
 */
function uwmed_preprocess_input__button(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for homepage_section paragraphs.
 */
function uwmed_preprocess_paragraph(&$variables) {

  if (!empty($variables['elements']['field_link'][0]['#title'])) {
    $variables['attributes']['class'][] = 'paragraph-with-cta';
  }
}

/**
 * Implements hook_preprocess_HOOK() for homepage_section paragraphs.
 */
function uwmed_preprocess_paragraph__homepage_section(&$variables) {

  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_section_image->isEmpty()) {
    $image_id = $paragraph->field_section_image->getValue()[0]['target_id'];
    $entity = Drupal::entityTypeManager()
      ->getStorage("media")
      ->load($image_id);
    $variables['image_url'] = $entity->image->entity->getFileUri();
  }

  if (!$paragraph->field_accent_color->isEmpty()) {
    $accent_color = $paragraph->get('field_accent_color')->entity->getName();
    $variables['accent_color'] = strtolower($accent_color);
  }
}

/**
 * Implements hook_preprocess_HOOK() for link_with_icon paragraphs.
 */
function uwmed_preprocess_paragraph__link_with_icon(&$variables) {
  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_link->isEmpty()) {
    $variables['url'] = $paragraph->field_link->first()->getUrl();
  }
}

/**
 * Implements hook_preprocess_HOOK() for homepage_section paragraphs.
 */
function uwmed_preprocess_paragraph__feature_story(&$variables) {

  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_section_image->isEmpty()) {
    $image_id = $paragraph->field_section_image->getValue()[0]['target_id'];
    $entity = Drupal::entityTypeManager()
      ->getStorage("media")
      ->load($image_id);
    $variables['image_url'] = $entity->image->entity->getFileUri();
  }
}

/**
 * Implements hook_preprocess_HOOK() for homepage sections templates.
 */
function uwmed_preprocess_field__node__field_homepage_sections(&$variables) {

  $bg_image_urls = [];
  foreach ($variables['items'] as $item) {

    if (!empty($item['content']['#paragraph']->field_section_image)) {

      $section_image = $item['content']['#paragraph']->field_section_image;
      $data = $section_image->getValue();

      if (!empty($data[0]['target_id'])) {
        $image_id = empty($data[0]['target_id']) ? NULL : $data[0]['target_id'];

        $entity = Drupal::entityTypeManager()
          ->getStorage("media")
          ->load($image_id);
      }

      if (!empty($entity->image->entity)) {
        $bg_image_urls[] = $entity->image->entity->getFileUri();
      }

    }
  }

  $variables['bg_image_urls'] = $bg_image_urls;

}

/**
 * Implements hook_preprocess_HOOK() for medical service content type.
 */
function uwmed_preprocess_node__uwm_medical_service(&$variables) {
  $variables["#attached"]['drupalSettings']['uwmcms_reader_primary_care_clinics'] = $variables["node"]->uwmcms_reader_primary_care_clinics;
  $variables["#attached"]['drupalSettings']['uwmcms_reader_medical_service_clinics'] = $variables["node"]->uwmcms_reader_medical_service_clinics;

  $webform = \Drupal::entityTypeManager()
    ->getStorage('webform')
    ->load('health_news_signup');
  $view_builder = \Drupal::service('entity_type.manager')
    ->getViewBuilder('webform');
  $build = $view_builder->view($webform);
  $variables['health_news_you_can_use'] = $build;
}
